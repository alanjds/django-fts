==========
django-fts
==========

This is a generic Full Text Search engine for Django projects.

Example:

settings.py
-----------
INSTALLED_APPS = (
    ...
    'fts'
)
FTS_BACKEND = 'simple://' # or 'dummy://' or 'pgsql://'


model.py
--------
from django.db import models
import fts

class Blog(fts.SearchableModel):
    title = models.CharField(max_length=100)
    body = models.TextField()

    # Defining a SearchManager without fields will use all CharFields and TextFields
    # this is the default and you do not need to explicitly add the following line:
    # objects = fts.SearchManager()

    # You can pass a list of fields that should be indexed
    # objects = SearchManager( fields=('title','body') )
    
    # You may also specify fields as a dictionary, mapping each field to a weight for ranking purposes
    # see http://www.postgresql.org/docs/8.3/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR
    #objects = SearchManager( fields={
    #    'title': 'A',
    #    'body': 'B',
    #} )

    def __unicode__(self):
        return u"%s" % (self.title)


python ./manage.py shell
------------------------
# Create some test data. By default, the index field is automatically updated when save() is called.

from blog.models import Blog

p = Blog(title='This is the title', body='The body of the article')
p.save()
p = Blog(title='This is the second title', body='The body of another article in the blog')
p.save()
p = Blog(title='This is the third title', body='The body of yet another simple article')
p.save()

# Perform a search
Blog.objects.search('bodies').all()

# You can force an index update to all or some instances:
Blog.objects.update_index()
Blog.objects.update_index( pk=1 )

#You can omit the search function and make the search directly over object
Blog.objects('simple')

# If using the pgsql backend, don't forget to add a Gin or GiST index to your tables:
# http://www.postgresql.org/docs/8.3/static/textsearch-indexes.html
# CREATE INDEX tablename_search_index ON tablename USING gin(search_index);
#   or
# CREATE INDEX tablename_search_index ON tablename USING gist(search_index);
