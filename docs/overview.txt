=This is a generic Full Text Search engine for Django projects.=

Currently implements three backends: dummy, simple and pgsql.

  * *dummy* - just uses ILIKE to do the search (no indexes)
  * *simple* - implements the search using two helper tables for the indexes
  * *pgsql* - uses PostgreSQL 8.3 full text search engine

It should be possible to easily integrate MySQL, Sphinx and Xapian backends too.

--------------------------------------------------------------------------------

==Example:==

===In your settings.py===
{{{
INSTALLED_APPS = (
    #...
    'fts'
)
FTS_BACKEND = 'simple://' # or 'dummy://' or 'pgsql://'
}}}

===In your models.py===
{{{
from django.db import models
import fts

class Blog(fts.SearchableModel):
    title = models.CharField(max_length=100)
    body = models.TextField()

    # Defining a SearchManager without fields will use all CharFields and TextFields
    # this is the default and you do not need to explicitly add the following line:
    # objects = fts.SearchManager()

    # You can pass a list of fields that should be indexed
    # objects = SearchManager( fields=('title','body') )
    
    # You may also specify fields as a dictionary, mapping each field to a weight for ranking purposes
    # see http://www.postgresql.org/docs/8.3/static/textsearch-features.html#TEXTSEARCH-MANIPULATE-TSVECTOR
    #objects = SearchManager( fields={
    #    'title': 'A',
    #    'body': 'B',
    #} )

    def __unicode__(self):
        return u"%s" % (self.title)
}}}


===Testing in the django shell===
{{{
# python ./manage.py shell
# Create some test data. By default, the index field is automatically updated when save() is called.

from blog.models import Blog

p = Blog(title='This is the title', body='The body of the article')
p.save()
p = Blog(title='This is the second title', body='The body of another article in the blog')
p.save()
p = Blog(title='This is the third title', body='The body of yet another simple article')
p.save()

# Perform a search
Blog.objects.search('bodies').all()

# You can force an index update to all or some instances:
Blog.objects.update_index()
Blog.objects.update_index( pk=1 )
Blog.objects.update_index( pk=[1, 2] )

#You can omit the search function and make the search directly over object
Blog.objects('simple')
}}}

==PostgreSQL specific information==
The PostgreSQL backend is heavily based in the code from http://www.djangosnippets.org/snippets/1328/ by Dan Watson.

If using the pgsql backend, don't forget to add a Gin or GiST index to your tables:
http://www.postgresql.org/docs/8.3/static/textsearch-indexes.html

===Example:===
{{{CREATE INDEX tablename_search_index ON tablename USING gin(search_index);}}}
